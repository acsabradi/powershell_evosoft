#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 21f32975-faf8-48d0-a556-860411f9b018
# Source File: GetCommandGUI.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
6B8AAB+LCAAAAAAABADdWW1v4jgQ/n7S/YcoH+4TV5LwrgOkQq97VbvbqrDd+7ZykgF8dWLkOLTc
r79xEijHW5ylILqq1EI645l5Zubx2Gk/gsdnIOZXRBIDP0SUhx3TMbu//mIY7XtBxzQk7Joy+EIC
6H4C2edBQEL/09ebi2k0apc3ZFJN9x/wpCHnU+iYg3kkIbj4RkOfv0QX11wE6e+Sse1fJeMpc6R6
YamfktGPmYwFdEKIpSCsZDzELqPeLcyH/BnCjttokJpXq9utShWsZss0QnSlY45wvUuXkWfT8CaU
+QJlzT4PpeAsSoNEZx8En4KQ80zp0vNgKnuxlDxcyKDUI4wA9T3IxNxE4P7WNMqLhcqLlXas3GcU
Qjmg/4LZrTZaJaNmOblKCpMeFz6IgZwz1Lymr+BfUcL4OFf5M3mlAdrr8VdUJCyCfBUaFlVReTe7
S7Bz5QeSCPnAIyqpgriPoGB0ngAIc3WH8CrN7g47+WV3RyP5ROHl6KUnIEJNhub21d6WGpmA94zY
A8oMRbwJ/hYVzuIgXFkTRW4wtn04pDp/AcG6Oh4WKx5t6aCMSobo5VsTpY2k3P9o4SRd8BPEka3/
M4Qy4LHw9idFo7/uuEdSpqqWjEqlpqHyGeOgA2DIRrtIdBeNvhGHhkq2l9QrJcN26hoKQ+LehD4g
tTc0pL9GgE06xehdBsjaEm4CMoYeTMiMcqEfmqJcs3sFklAWbZP/c4abQCas8pPQIPircHxfed4u
JwrLjTclfv1tQO0iSLIn2gVc3EoLbQJvFWdXbUxtQ7vmGA1Be+NYLTj0Ubve7KZyyq4UqrfN6iye
tnQoO3rW0tHubdgtlrzLWPIUJ800rGfb0sl2mrt1T4ul0CmWQR230vEMHfpd3yNkmScaxYQlA26P
eM+4dyh22YXfKlngTO09bwLxPXl+KE3cERfY0cuNKSu4mnsQSdSa2lWzNKhdLg4eVhyrULVUtatl
qyfny+l4THYPYHTHcQolKzOn39mWVThXmzxw1r3yhcfhQb3ibB679/aKMqg/jdmF8ddxJ+2VrZ6c
b6+E6O6hvVIgWZm5o/aK/dHmGHVFVWh+Cb2J2n17HLWDkvFIxxOds0h6JfWYTJNm9/620ORTaWGm
q3WdQ8nq5KNlJc11o1Z44NEqjKQtfyPB9A8tZ95v2Lm/zR1y/v8lvy6T0526Ijt6aVJlSZ3q7F3X
sAksVzCVE3VwxD/NHt0sw3WtJIKsues4S285dawnUJAwmhJsDrnMxPLJmnZRPE9zB7LlOm3v5emK
YC4636ivEtBcZ72zRiJliH0QKAnd2G2r9ZGCX1zf7Y0/E9JO//owf9YIZLd+ewFIZbRLoLE+rxcF
YEBmoF6RpZvk0SGI0NwIzfmJucUFaPsyiiDABSBaxJs9mXeDyOOCUfcdnGiXl6uuW0nDPoWNd4c2
36J6iXoaQ4K80HD8I7asyqg2aoxs269ZpELybf0dsNPERAW2EBfzAYgZ9eCHUlY4uj4XcJLwsqiQ
QzC0I8S2/Jr2dru8+ma/+x9GHxkn6B8AAA==#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.95
     Generated on:       2015.11.29. 7:56
     Generated by:       Administrator
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2015
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-GetCommandGUI_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAblak = New-Object 'System.Windows.Forms.Form'
	$resultlist = New-Object 'System.Windows.Forms.ListView'
	$resultbox = New-Object 'System.Windows.Forms.TextBox'
	$buttonGetCommand = New-Object 'System.Windows.Forms.Button'
	$labelVerb = New-Object 'System.Windows.Forms.Label'
	$verbbox = New-Object 'System.Windows.Forms.TextBox'
	$labelNoun = New-Object 'System.Windows.Forms.Label'
	$nounbox = New-Object 'System.Windows.Forms.TextBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$CommandType = New-Object 'System.Windows.Forms.ColumnHeader'
	$Name = New-Object 'System.Windows.Forms.ColumnHeader'
	$Version = New-Object 'System.Windows.Forms.ColumnHeader'
	$Source = New-Object 'System.Windows.Forms.ColumnHeader'
	$savefiledialog = New-Object 'System.Windows.Forms.SaveFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$buttonOK_Click={$formAblak.Close()}
	
	$buttonGetCommand_Click = {
		if ($nounbox.Text -eq '')
			{ $nounbox.Text = '*'}
		
		if ($verbbox.Text -eq '')
		{ $verbbox.Text = '*' }
		
		$result = Get-Command -Noun $nounbox.Text -Verb $verbbox.Text
		foreach ($resultitem in $result)
		{
			$resultbox.AppendText($resultitem)
			$resultbox.AppendText("`n")
			
			$item = $resultlist.Items.Add($resultitem.CommandType.ToString())
			$item.SubItems.Add($resultitem.Name.ToString())
			$item.SubItems.Add($resultitem.Version.ToString())
			$item.SubItems.Add($resultitem.Source.ToString())
		}
	
	}
	
	#region Control Helper Functions
	function Sort-ListViewColumn 
	{
		<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
	
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
	
		.PARAMETER ListView
			The ListView control to sort.
	
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
			
		.PARAMETER  SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
	#>
		param(	
				[ValidateNotNull()]
				[Parameter(Mandatory=$true)]
				[System.Windows.Forms.ListView]$ListView,
				[Parameter(Mandatory=$true)]
				[int]$ColumnIndex,
				[System.Windows.Forms.SortOrder]$SortOrder = 'None')
		
		if(($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
			try{
			$local:type = [ListViewItemComparer]
		}
		catch{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@  | Out-Null
		}
		#endregion
		
		if($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort()#Sort the items
		}
		else
		{
			if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending	
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder) 
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($lvGroup -eq $null)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($SubItems -ne $null)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($lvGroup -ne $null)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($lvGroup -ne $null)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	#endregion
	
	
	$resultlist_ItemChecked=[System.Windows.Forms.ItemCheckedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ItemCheckedEventArgs]
		if ($_.Item.Checked)
		{
			$savefiledialog.Filter = "txt files (*.txt)|*.txt|All files (*.*)|*.*"
			$file= $($_.Item.SubItems[1].Text) + "_help.txt"
			$savefiledialog.FileName = $file
			$savefiledialog.ShowDialog()
			$file = $savefiledialog.FileName
			
			Get-Help $($_.Item.SubItems[1].Text) | Out-File $file
		}
	
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAblak.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$resultlist.remove_ItemChecked($resultlist_ItemChecked)
			$buttonGetCommand.remove_Click($buttonGetCommand_Click)
			$buttonOK.remove_Click($buttonOK_Click)
			$formAblak.remove_Load($Form_StateCorrection_Load)
			$formAblak.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAblak.SuspendLayout()
	#
	# formAblak
	#
	$formAblak.Controls.Add($resultlist)
	$formAblak.Controls.Add($resultbox)
	$formAblak.Controls.Add($buttonGetCommand)
	$formAblak.Controls.Add($labelVerb)
	$formAblak.Controls.Add($verbbox)
	$formAblak.Controls.Add($labelNoun)
	$formAblak.Controls.Add($nounbox)
	$formAblak.Controls.Add($buttonOK)
	$formAblak.AcceptButton = $buttonOK
	$formAblak.ClientSize = '479, 502'
	$formAblak.FormBorderStyle = 'FixedDialog'
	$formAblak.MaximizeBox = $False
	$formAblak.MinimizeBox = $False
	$formAblak.Name = 'formAblak'
	$formAblak.StartPosition = 'CenterScreen'
	$formAblak.Text = 'Ablak'
	#
	# resultlist
	#
	$resultlist.CheckBoxes = $True
	[void]$resultlist.Columns.Add($CommandType)
	[void]$resultlist.Columns.Add($Name)
	[void]$resultlist.Columns.Add($Version)
	[void]$resultlist.Columns.Add($Source)
	$resultlist.Location = '4, 335'
	$resultlist.MultiSelect = $False
	$resultlist.Name = 'resultlist'
	$resultlist.Size = '463, 126'
	$resultlist.TabIndex = 7
	$resultlist.UseCompatibleStateImageBehavior = $False
	$resultlist.View = 'Details'
	$resultlist.add_ItemChecked($resultlist_ItemChecked)
	#
	# resultbox
	#
	$resultbox.Location = '141, 175'
	$resultbox.Multiline = $True
	$resultbox.Name = 'resultbox'
	$resultbox.Size = '181, 113'
	$resultbox.TabIndex = 6
	#
	# buttonGetCommand
	#
	$buttonGetCommand.AutoSize = $True
	$buttonGetCommand.Location = '141, 105'
	$buttonGetCommand.Name = 'buttonGetCommand'
	$buttonGetCommand.Size = '181, 23'
	$buttonGetCommand.TabIndex = 5
	$buttonGetCommand.Text = 'Get-Command'
	$buttonGetCommand.UseVisualStyleBackColor = $True
	$buttonGetCommand.add_Click($buttonGetCommand_Click)
	#
	# labelVerb
	#
	$labelVerb.Location = '141, 58'
	$labelVerb.Name = 'labelVerb'
	$labelVerb.Size = '29, 20'
	$labelVerb.TabIndex = 4
	$labelVerb.Text = 'Verb'
	#
	# verbbox
	#
	$verbbox.Location = '222, 58'
	$verbbox.Name = 'verbbox'
	$verbbox.Size = '100, 20'
	$verbbox.TabIndex = 3
	#
	# labelNoun
	#
	$labelNoun.Location = '141, 22'
	$labelNoun.Name = 'labelNoun'
	$labelNoun.Size = '41, 20'
	$labelNoun.TabIndex = 2
	$labelNoun.Text = 'Noun'
	#
	# nounbox
	#
	$nounbox.Location = '222, 22'
	$nounbox.Name = 'nounbox'
	$nounbox.Size = '100, 20'
	$nounbox.TabIndex = 1
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '392, 467'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 0
	$buttonOK.Text = '&OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#
	# imagelist1
	#
	$imagelist1.ColorDepth = 'Depth8Bit'
	$imagelist1.ImageSize = '16, 16'
	$imagelist1.TransparentColor = 'Transparent'
	#
	# CommandType
	#
	$CommandType.Text = 'CommandType'
	$CommandType.Width = 81
	#
	# Name
	#
	$Name.Text = 'Name'
	$Name.Width = 109
	#
	# Version
	#
	$Version.Text = 'Version'
	$Version.Width = 84
	#
	# Source
	#
	$Source.Text = 'Source'
	$Source.Width = 178
	#
	# savefiledialog
	#
	$formAblak.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAblak.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAblak.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAblak.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formAblak.ShowDialog()

} #End Function

#Call the form
Call-GetCommandGUI_psf | Out-Null
