#=============================================
#---- WMI használat ----
#============================================= 
Get-WmiObject -NameSpace "root/CIMV2" -List
Get-WmiObject -Class Win32_NetworkAdapter
Get-WmiObject -Query 'SELECT * FROM Win32_Product WHERE Vendor="Microsoft Corporation"'
Get-WmiObject -Class Win32_Product -Filter 'Vendor="Microsoft Corporation"'
(Get-WmiObject -Class Win32_Product -Filter 'Vendor="Microsoft Corporation"').GetType()
(Get-WmiObject -Class Win32_Product -Filter 'Vendor="Microsoft Corporation"')[0].GetType()
(Get-WmiObject -Class Win32_Product -Filter 'Vendor="Microsoft Corporation"')[0] | Get-Member
Get-WmiObject -Class Win32_Product -Filter 'Vendor="Microsoft Corporation"' | Format-List -Property Name
Get-WmiObject -Class Win32_Service -Credential DOMAIN\Administrator -Computer MasikGep
Get-WmiObject -Class Win32_Share
Get-WmiObject -Class Win32_Share | Get-Member
$share = [wmiclass] "Win32_Share"
$share | Get-Member
$share.Create("C:\PowerShell","Temp",0)
Get-WmiObject -Class Win32_Share
[wmi]"\\$($env:ComputerName)\root\cimv2:Win32_Share.Name='Temp'"
(Get-WmiObject -Class Win32_Share -Filter 'Name="Temp"').Delete()
Get-WmiObject -Class Win32_Share
# WMIExplorer indítása
# Root\CIMv2\Win32_Share Instances vizsgálata
Get-WmiObject -Class "Win32_ComputerSystem" -NameSpace "root\CIMV2"
(Get-WmiObject -Class "Win32_ComputerSystem" -Namespace "root\CIMV2").Name
Get-WmiObject -Class "Win32_BIOS" -NameSpace "root\CIMV2"
(Get-WmiObject -Class "Win32_BIOS" -NameSpace "root\CIMV2").Manufacturer
Get-WmiObject -Class "Win32_Processor" -NameSpace "root\CIMV2"
(Get-WmiObject -Class "Win32_Processor" -NameSpace "root\CIMV2").Name
$disk = Get-WmiObject -Class "Win32_LogicalDisk" -NameSpace "root\CIMV2" -Filter 'Caption="C:"'
$disk
$disk.FreeSpace/1mb
#=============================================
#---- CIM vs. WMI ----
#=============================================
# WinRM bekapcsolása 
# Enable-PSRemoting –SkipNetworkProfileCheck -Force
Get-WMIObject –Namespace root –List -Recurse | Select-Object -Unique __NAMESPACE
Get-WmiObject -Namespace root\cimv2 –List | Sort-Object -Property Name
Get-CimClass –Namespace root\CIMv2 | Sort-Object -Property CimClassName
Get-Command -Module CimCmdlets | Sort-Object -Property Noun
Get-WmiObject –ClassName Win32_Service | Get-Member
Get-CimInstance –ClassName Win32_Service | Get-Member
Get-WmiObject -Class Win32_Service | Get-Member | Where-Object Name -eq 'Change' | Format-List -Property Name,Definition
Get-CimInstance -Class Win32_Service | Get-Member | Where-Object Name -eq 'Change' | Format-List -Property Name,Definition
Get-CimClass –Class Win32_Service
(Get-CimClass –Class Win32_Service).CimClassMethods
(Get-CimClass –Class Win32_Service).CimClassMethods | Where-Object {$_.Name -eq "Change"}
((Get-CimClass –Class Win32_Service).CimClassMethods | Where-Object {$_.Name -eq "Change"}).Parameters
$disk = Get-WmiObject –Class Win32_LogicalDisk –Filter "DriveType=3“
$disk
$disk = Get-CimInstance –ClassName Win32_LogicalDisk –Filter "DriveType=3"
$disk
$disk = Get-WmiObject –Query "SELECT * FROM Win32_LogicalDisk WHERE DriveType = 3"
$disk
$disk = Get-CimInstance –Query "SELECT * FROM Win32_LogicalDisk WHERE DriveType = 3"
$disk
$s = New-CimSession –ComputerName localhost
Get-WmiObject -Class Win32_OperatingSystem -Computer localhost
Get-CimInstance –CimSession $s –ClassName Win32_OperatingSystem
$s | Remove-CimSession
Start-Process -FilePath notepad
Get-WmiObject –Class Win32_Process –Filter "Name='notepad.exe'" | Invoke-WmiMethod –Name Terminate
Start-Process -FilePath notepad
Invoke-CimMethod -Query 'SELECT * FROM Win32_Process WHERE name LIKE "notepad%"' -MethodName "Terminate"
#=============================================
#---- WMI WHERE ----
#=============================================
$query = "SELECT * FROM Win32_Service"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE Name='AudioSrv'"
Get-WMIObject -Query $query
# LIKE
$query = "SELECT Name, State FROM Win32_Service WHERE Name LIKE 'AudioSrv'"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE Name LIKE '%Audio%'"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE Name LIKE '[af]%'"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE Name LIKE '[a-f]%'"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE Name LIKE '[^afgh]%'"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE Name LIKE '%a_diosrv%'"
Get-WMIObject -Query $query
# Logikai operátorok
$query = "SELECT * FROM Win32_Service WHERE State='Running' AND StartMode='Manual'"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE (State='Running' AND StartMode='Manual') AND (Name LIKE '[af]%')"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE State='Stopped' OR State='Paused'"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE (State='Running' OR State='Paused') AND Name LIKE '[af]%'"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE NOT (State='Running')"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE State<>'Running'"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_Service WHERE State!='Running'"
Get-WMIObject -Query $query
# NULL kezelés
$query = "SELECT * FROM Win32_LogicalDisk WHERE FileSystem IS NULL"
Get-WMIObject -Query $query
$query = "SELECT * FROM Win32_LogicalDisk WHERE FileSystem IS NOT NULL"
Get-WMIObject -Query $query
#=============================================
#---- WMI ASSOCIATORS ----
#=============================================
# Osztálykapcsolatok
$query = "ASSOCIATORS OF {Win32_Service.Name='NetLogon'} WHERE ClassDefsOnly"
Get-WMIObject -Query $query
# Objektumkapcsolatok
$query = "ASSOCIATORS OF {Win32_Service.Name='NetLogon'}"
Get-WMIObject -Query $query
$query = "ASSOCIATORS OF {Win32_Service.Name='NetLogon'} WHERE AssocClass=Win32_DependentService"
Get-WMIObject -Query $query
$query = "ASSOCIATORS OF {Win32_Service.Name='LanmanWorkstation'} WHERE ResultRole=Dependent"
Get-WMIObject -Query $query
Get-Service -Name "LanmanWorkstation" -DependentServices
$query = "ASSOCIATORS OF {Win32_Service.Name='NetLogon'} WHERE ResultRole=Antecedent"
Get-WMIObject -Query $query
Get-Service -Name "Netlogon" -RequiredServices
#=============================================
#---- Sajat PS Objektum: Computer ----
#=============================================
$computer = New-Object PSObject
$computer | Add-Member -MemberType NoteProperty -Name Name -Value $env:computername
$computer
$nics = Get-WmiObject -Class Win32_NetworkAdapterConfiguration
$nics
$computer | Format-List
$computer | Add-Member -MemberType NoteProperty -Name NICs -Value $nics
$computer | Format-List
$computer.NICs
$disks = Get-WMIObject Win32_LogicalDisk | Foreach-Object {Get-WmiObject -Query "Associators of {Win32_LogicalDisk.DeviceID='$($_.DeviceID)'} WHERE ResultRole=Antecedent"}
$disks
$computer | Add-Member -MemberType NoteProperty -Name Disks -Value $disks
$computer | Format-List
$computer.disks
Get-NetIPInterface
Get-NetIPAddress
Get-NetIPAddress | Select-Object -Property InterfaceIndex, InterfaceAlias, IpAddress
$ips = Get-NetIPAddress | Select-Object -Property InterfaceIndex, InterfaceAlias, IpAddress
$ips
$ifs=$ips | Foreach-Object {[ordered]@{Name=$_.Interfacealias; Ip=$_.IPAddress; ConnectionState=((Get-NetIpInterface -InterFaceIndex $_.InterFaceIndex).ConnectionState | Get-Unique)}}
$ifs
$computer | Add-Member -MemberType NoteProperty -Name IFs -Value $ifs
$computer | Format-List
$computer.Ifs