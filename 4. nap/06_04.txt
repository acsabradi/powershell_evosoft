#=============================================
#---- Eseménynapló kezelés ----
#=============================================
#---- Eseménynapló olvasás ----
Get-EventLog -List
(Get-EventLog -List)[7] | Format-List
(Get-EventLog -List)[7] | Format-List -Property *
Get-EventLog -LogName "Windows Powershell" -Newest 10
Get-EventLog -LogName "Windows Powershell" -Newest 10 | Format-List -Property Message
(Get-EventLog -LogName "Windows Powershell" -Newest 10).GetType()
(Get-EventLog -LogName "Windows Powershell" -Newest 10)[0].GetType()
(Get-EventLog -LogName "Windows Powershell" -Newest 10)[0] | Get-Member
# ILSpy-jal megnézni: System.Diagnostics.EventLogEntryType
Get-Eventlog -LogName System | Where-Object {$_.EntryType -eq "Error"}
Get-Eventlog -LogName System | Where-Object {$_.EntryType -eq "Error" –and $_.TimeGenerated -ge (Get-Date).AddDays(-7)} | Sort-Object -Descending TimeGenerated | Format-Table TimeGenerated, Message -AutoSize
Get-WinEvent -ListLog *
Get-WinEvent -ListLog * -ComputerName localhost | Where-Object { $_.RecordCount }
Get-WinEvent -Listlog "Microsoft-Windows-Ntfs/Operational" | Format-List -Property *
Get-WinEvent -LogName "Microsoft-Windows-Ntfs/Operational"
$date = (Get-Date).AddDays(-7)
Get-WinEvent -FilterHashtable @{Id = 151; LogName="Microsoft-Windows-Ntfs/Operational"; StartTime=$date}
# Eseménynapló írás 
Get-EventLog -list | Where-Object { $_.Log -match "Application" }
$mylog = Get-EventLog -List | Where-Object { $_.Log -match "Application" }
$mylog.GetType()
$mylog | Get-Member
"A napló neve: {0}" -f $mylog.LogDisplayName
$mylog.Source="PowerShell"
$mylog.WriteEntry("Hello world")
# Írás a Powershell logba
Get-EventLog -list | Where-Object { $_.Log -match "Windows PowerShell" }
$mylog = Get-EventLog -list | Where-Object { $_.Log -match "Windows PowerShell" }
"A napló neve: {0}" -f $mylog.LogDisplayName
$mylog.Source="PowerShell"
$mylog.WriteEntry("Hello world")
(Get-EventLog  -LogName "Windows PowerShell" -Newest 1).Message
Write-EventLog –LogName "Windows PowerShell" –Source "PowerShell" –EntryType Information –EventID 1 –Message "Hello World"
(Get-EventLog  -LogName "Windows PowerShell" -Newest 1).Message
(Get-EventLog  -LogName "Windows PowerShell" -Newest 1) | Format-List -Property *
Write-EventLog –LogName "Windows PowerShell" –Source "MyScript" –EntryType Information –EventID 1 –Message "Hello World"
New-EventLog –LogName "Windows PowerShell" –Source "MyScript"
Write-EventLog –LogName "Windows PowerShell" –Source "MyScript" –EntryType Information –EventID 1 –Message "Hello World"
(Get-EventLog -LogName "Windows PowerShell" -Newest 1).Message
Remove-EventLog -Source "MyScript"
#=============================================
#---- Registry kezelés ----
#============================================= 
New-PSDrive -Name Uninstall -PSProvider Registry -Root HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall
Get-ChildItem -Path Uninstall:
(Get-ChildItem -Path Uninstall:)[0].GetType()
(Get-ChildItem -Path Uninstall:)[0] | Get-Member
Get-ChildItem -Path Uninstall: | ForEach-Object {(Get-ItemProperty $_.PSPath)}
Get-ChildItem -Path Uninstall: | ForEach-Object {(Get-ItemProperty $_.PSPath).DisplayName}
Set-Location -Path HKLM:\SOFTWARE
New-Item -Name Proba
Set-Location -Path  Proba
New-ItemProperty -Path . -Name Dummy -Value 1 -type DWORD
Set-ItemProperty -Path . -Name Dummy -Value 0
Get-ItemProperty -Path HKLM:\SOFTWARE\Proba -Name Dummy
Set-Location -Path  ..
Remove-Item -Path Proba
Set-Location -Path  C: